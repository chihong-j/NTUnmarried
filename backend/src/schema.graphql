scalar Upload

type Query {
    user(email: String!): User!
    stranger(email: String!): [User!]
    chatBox(name: String!): ChatBox! #Query all the messages in the chatBox given two users
    usersChatting(email: String!): [ChatBox!] #Query all the ChatBoxes the user have with others
}

type Mutation {
    createMessage(from: String!, to: String!, message: String!): Message!
    createChatBox(email1: String, email2: String): ChatBox!
    createLike(to: String!, isLike: Boolean!): User
    updateUser(email: String!, gender: Boolean, age: Int, aboutMe: String, department: String): User
    uploadFile(file: Upload!): String!
    signup(email: String!, password: String!, name: String!, gender: Boolean!, age: Int, aboutMe: String, department: String): User!
    login(email: String!): Token!
}

type Subscription {
    message(from: String!, to: String!): Message!
    notification(email: String!): NotificationPayload
    chatBoxPayload(email: String!): ChatBoxPayload
}


type User {
    id: ID!,
    email: String!,
    name: String!,
    gender: Boolean!,
    age: Int!
    aboutMe: String!,
    department: String!,
    images: [String!],
    password: String!,
    notificationList: [NotificationPayload],
    chatBoxPayloadList: [ChatBoxPayload],
}

type NotificationPayload { #createLike要subscribe這個
    name: String
    image: String 
}

type ChatBoxPayload { #當createMessage createLike要subscribe這個
    name: String # Ex. b07901067@ntu.edu.tw_b07901068@ntu.edu.tw
    friendName: String #對方的名字
    friendImage: String #對方大頭貼(照片第一張)
    friendEmail: String
}

type Token {
    token: String!
    password: String!
}

type ChatBox {
  id: ID!
  name: String!
  messages: [Message]
}

type Message {
  id: ID!
  sender: User!
  body: String!
}




