scalar Upload

type Query {
    user(email: String!): User!
    stranger(email: String!): [User!]
    chatBox(email1: String!, email2: String!): ChatBox! #Query all the messages in the chatBox given two users
    usersChatting(email: String!): [ChatBox!] #Query all the ChatBoxes the user have with others
}

type Mutation {
    createMessage(from: String!, to: String!, message: String!): Message!
    createChatBox(email1: String, email2: String): ChatBox!
    createLike(to: String!, isLike: Boolean!): User
    updateUser(email: String!, gender: Boolean, age: Int, aboutMe: String, department: String): User
    uploadFile(file: Upload!): String!
    signup(email: String!, password: String!, name: String!, gender: Boolean!, age: Int, aboutMe: String, department: String): User!
    login(email: String!): Token!
}

type Subscription {
#    message(from: String!, to: String!): MessageSubscriptionPayload!
    notification: User!
}


type User {
    id: ID!,
    email: String!,
    name: String!,
    gender: Boolean!,
    age: Int!
    aboutMe: String!,
    department: String!,
    images: [String!],
    password: String!,
    pairedEmail: [String],
    pairedName: [String]
}

type Token {
    token: String!
    password: String!
}

type ChatBox {
  id: ID!
  name: String!
  messages: [Message!]
}

type Message {
  id: ID!
  sender: User!
  body: String!
}

